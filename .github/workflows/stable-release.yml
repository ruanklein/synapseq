name: Stable Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version (e.g., v1.5.6)"
        required: true
        type: string

permissions:
  contents: write
  actions: read
  packages: write

jobs:
  build-linux-windows:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix
          else
            VERSION=${GITHUB_REF#refs/tags/v}  # Remove 'refs/tags/v' prefix
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_version=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Stable version: ${VERSION}"

          # Update VERSION file for consistency
          echo $VERSION > VERSION

      - name: Build for Linux and Windows
        run: |
          mkdir -p artifacts

          # Run build using docker compose
          docker compose run --rm build

          # Copy generated artifacts with version suffix
          if [ -f "dist/synapseq-linux64" ]; then
            cp dist/synapseq-linux64 artifacts/synapseq-linux64
          fi

          if [ -f "dist/synapseq-linux32" ]; then
            cp dist/synapseq-linux32 artifacts/synapseq-linux32
          fi

          if [ -f "dist/synapseq-windows-setup.exe" ]; then
            cp dist/synapseq-windows-setup.exe artifacts/synapseq-windows-setup.exe
          fi

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          find . -type f -exec sha256sum {} \; | sort > ../checksums.txt
          cat ../checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: synapseq-stable-${{ steps.version.outputs.version }}
          path: |
            artifacts/
            checksums.txt
          retention-days: 90

  build-macos:
    runs-on: macos-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          # Install required tools via Homebrew
          brew install automake autoconf libtool pandoc create-dmg

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix
          else
            VERSION=${GITHUB_REF#refs/tags/v}  # Remove 'refs/tags/v' prefix
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_version=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Stable version: ${VERSION}"

          # Update VERSION file for consistency
          echo $VERSION > VERSION

      - name: Build libraries for macOS
        run: |
          ./macos-build-libs.sh

      - name: Build SynapSeq for macOS
        run: |
          ./macos-build-synapseq.sh

      - name: Create macOS installer
        run: |
          ./macos-create-installer.sh

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts

          # Copy DMG installer with version
          if [ -f "dist/SynapSeq-Installer.dmg" ]; then
            cp dist/SynapSeq-Installer.dmg artifacts/SynapSeq-Installer.
          fi

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          find . -type f -exec shasum -a 256 {} \; | sort > ../checksums-macos.txt
          cat ../checksums-macos.txt

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: synapseq-macos-stable-${{ steps.version.outputs.version }}
          path: |
            artifacts/
            checksums-macos.txt
          retention-days: 90

  create-release:
    needs: [build-linux-windows, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux/Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: synapseq-stable-${{ needs.build-linux-windows.outputs.version }}
          path: linux-windows/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: synapseq-macos-stable-${{ needs.build-macos.outputs.version }}
          path: macos/

      - name: Combine artifacts
        run: |
          mkdir -p all-artifacts

          # Copy Linux/Windows artifacts
          if [ -d "linux-windows/artifacts" ]; then
            cp linux-windows/artifacts/* all-artifacts/ 2>/dev/null || true
          fi

          # Copy macOS artifacts
          if [ -d "macos/artifacts" ]; then
            cp macos/artifacts/* all-artifacts/ 2>/dev/null || true
          fi

          # Merge checksums
          if [ -f "macos/checksums-macos.txt" ]; then
            cat macos/checksums-macos.txt >> all-artifacts/checksums.txt
            rm -f macos/checksums-macos.txt
          fi

      - name: Generate release body from ChangeLog
        run: |
          # Update VERSION file to match the release version
          echo "${{ needs.build-linux-windows.outputs.version }}" > VERSION

          # Extract changelog for this version
          if [ -f "ChangeLog.txt" ]; then
            echo "## What's Changed" >> release_body.md
            echo "" >> release_body.md
            
            # Extract changelog entries for this version using the provided command
            CHANGELOG_CONTENT=$(grep "^$(cat VERSION):" ChangeLog.txt | sed -r 's/^[0-9]+.[0-9]+.[0-9]+:/*/g' || true)
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "$CHANGELOG_CONTENT" >> release_body.md
            else
              echo "* Release notes not found in ChangeLog.txt for version ${{ needs.build-linux-windows.outputs.version }}" >> release_body.md
            fi
          fi

      - name: Create Stable Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-linux-windows.outputs.version }}
          name: "v${{ needs.build-linux-windows.outputs.version }}"
          body_path: release_body.md
          files: |
            all-artifacts/*
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
